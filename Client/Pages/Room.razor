@page "/{roomName}"
@using Microsoft.AspNetCore.SignalR.Client
@using BlazorChatAppFinal01.Shared
@inject NavigationManager NavigationManager

@inject HttpClient Http

<!DOCTYPE html>
<html>
<head>

</head>
<body>

    <p>@AppState.UserName  </p>

    <div class="container bg-dark text-white ">

        <div class="form-group">
            <div class="d-flex">
                <ul id="messagesList">
                    @foreach (var message in messages)
                    {

                        if (message == @copyMessage)
                        {
                            <li class="ml-auto p-2">@message</li>
                        }
                        else
                        {
                            <li>@message</li>
                        }

                    }
                </ul>
            </div>

        </div>

    </div>
    

    <div class="row justify-content-md-center">

        <div class="col col-lg-9 ">
            <div class="input-group">
                @*<label>
                    Message:
                    <input @bind="messageInput" size="50" />*@
                <textarea placeholder="Username"  @bind="messageInput" class="form-control" aria-label="With textarea"></textarea>
                @* </label>*@
            </div>
        </div>
        <div class="col-auto">
            <button class="btn btn-danger input-group" @onclick="Send" disabled="@(HubConnection.State != HubConnectionState.Connected)">Send</button>

        </div>
    </div>







            </body>
</html>



@code {

    string previousRoomName = "";
    [Parameter] public string RoomName { get; set; }
    [CascadingParameter] public Microsoft.AspNetCore.SignalR.Client.HubConnection HubConnection { get; set; }

    private List<string> messages = new List<string>();
    //private string userInput;
    private string messageInput;
    public string copyMessage;

    protected override async Task OnParametersSetAsync()
    {


        if (RoomName == previousRoomName)
        {
            
            return;
        }
        else
        {


            messages.Clear();

            messageInput = "";

            if (AppState.Rooms.ContainsKey(RoomName))
            {
                AppState.Rooms[RoomName] = 0;
                AppState.AppStateUpdated?.Invoke();
            }

            AppState.CurrentRoom = this;

            var previousChats = await Http.GetFromJsonAsync<ChatData[]>($"Chat/{RoomName}");

            if (previousChats != null)
            {
                foreach (var previousChat in previousChats)
                {
                    var encodedMsg = $"{previousChat.User}: {previousChat.Message}";
                    messages.Add(encodedMsg);
                }
            }
        }
    }

    public void ReceiveMessage(string message)
    {
        messages.Add(message);
        StateHasChanged();
    }

    Task Send() =>
    HubConnection.SendAsync("SendMessage", AppState.UserName, messageInput, RoomName);



}


